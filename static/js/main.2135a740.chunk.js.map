{"version":3,"sources":["ResetViewsButton.js","posts.js","users.js","transactions.js","Items.js","schedules.js","MyAccount.js","UpdateHarga.js","TrashPurchase.js","comments.js","Dashboard.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["ResetViewsButton","state","isOpen","handleClick","_this","setState","handleDialogClose","handleConfirm","_this$props","props","basePath","crudUpdateMany","resource","selectedIds","views","react_default","a","createElement","react","Button","label","onClick","this","Confirm","title","content","onConfirm","onClose","Component","connect","undefined","PostFilter","Filter","TextInput","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostBulkActionButtons","src_ResetViewsButton","Object","assign","BulkDeleteButton","PostList","List","bulkActionButtons","posts_PostBulkActionButtons","filters","posts_PostFilter","Responsive","small","SimpleList","primaryText","record","Name","secondaryText","Bank_Name","tertiaryText","Address","medium","Datagrid","TextField","ReferenceField","EditButton","PostTitle","_ref","concat","PostEdit","Edit","posts_PostTitle","SimpleForm","DisabledInput","LongTextInput","PostCreate","Create","UserList","users_PostFilter","Date","published_at","toLocaleDateString","EmailField","ChekTransaksi","transactions_PostFilter","ItemList","ScheduleList","MyAccount","cardStyle","width","minHeight","margin","display","verticalAlign","GAMBAR","style","Card_default","CardHeader_default","CardContent_default","CardActions_default","textAlign","UpdateHarga","UpdateHarga_GAMBAR","trashpurchase","CommentGrid","ids","data","map","id","key","subheader","DateField","avatar","Avatar_default","icon","PersonAdd_default","defaultProps","CommentList","comments_CommentGrid","Dashboard","authProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","dataProvider","jsonServerProvider","theme","createMuiTheme","palette","primary","index","secondary","main","App","Admin","dashboard","Resource","name","list","edit","create","PostIcon","UserIcon","AddShoppingCart","DateRange","AccountBox","AddCircleOutline","PersonAdd","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2135a740.chunk.js","sourcesContent":["import React, { Fragment, Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Confirm, crudUpdateMany } from \"react-admin\";\r\n\r\nclass ResetViewsButton extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  handleClick = () => {\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({ isOpen: false });\r\n  };\r\n\r\n  handleConfirm = () => {\r\n    const { basePath, crudUpdateMany, resource, selectedIds } = this.props;\r\n    crudUpdateMany(resource, selectedIds, { views: 0 }, basePath);\r\n    this.setState({ isOpen: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Button label=\"Reset Views\" onClick={this.handleClick} />\r\n        <Confirm\r\n          isOpen={this.state.isOpen}\r\n          title=\"Update View Count\"\r\n          content=\"Are you sure you want to reset the views for these items?\"\r\n          onConfirm={this.handleConfirm}\r\n          onClose={this.handleDialogClose}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  undefined,\r\n  { crudUpdateMany }\r\n)(ResetViewsButton);\r\n","// in src/posts.js\r\nimport React, { Fragment } from \"react\";\r\nimport { BulkDeleteButton } from \"react-admin\";\r\nimport ResetViewsButton from \"./ResetViewsButton\";\r\nimport {\r\n  List,\r\n  Responsive,\r\n  SimpleList,\r\n  Edit,\r\n  Create,\r\n  Datagrid,\r\n  ReferenceField,\r\n  TextField,\r\n  EditButton,\r\n  DisabledInput,\r\n  LongTextInput,\r\n  Filter,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  TextInput\r\n} from \"react-admin\";\r\n\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"user\" source=\"Id\" reference=\"users\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nconst PostBulkActionButtons = props => (\r\n  <Fragment>\r\n    <ResetViewsButton label=\"Reset Views\" {...props} />\r\n    {/* Add the default bulk delete action */}\r\n    <BulkDeleteButton {...props} />\r\n  </Fragment>\r\n);\r\n\r\nexport const PostList = props => (\r\n  <List\r\n    {...props}\r\n    bulkActionButtons={<PostBulkActionButtons />}\r\n    filters={<PostFilter />}\r\n  >\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.Name}\r\n          secondaryText={record => record.Bank_Name}\r\n          tertiaryText={record => record.Address}\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <ReferenceField label=\"Pengguna\" source=\"id\" reference=\"users\">\r\n            <TextField source=\"name\" />\r\n          </ReferenceField>\r\n          <TextField source=\"title\" />\r\n          <TextField source=\"body\" />\r\n          <EditButton />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\n\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\n\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/users.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Edit,\r\n  Datagrid,\r\n  EmailField,\r\n  TextField,\r\n  Filter,\r\n  Create,\r\n  TextInput,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  LongTextInput,\r\n  SimpleList,\r\n  Responsive,\r\n  // EditButton,\r\n  // ShowButton,\r\n  // ReferenceField,\r\n  DisabledInput\r\n} from \"react-admin\";\r\n\r\n// const UserFilter = ({ permissions, ...props }) => (\r\n//   <Filter {...props}>\r\n//     <TextInput label=\"user.list.search\" source=\"q\" alwaysOn />\r\n//     <TextInput source=\"name\" />\r\n//     {permissions === \"admin\" ? <TextInput source=\"role\" /> : null}\r\n//   </Filter>\r\n// );\r\n\r\n// export const UserList = ({ permissions, ...props }) => (\r\n//   <List\r\n//     {...props}\r\n//     filters={<UserFilter permissions={permissions} />}\r\n//     sort={{ field: \"name\", order: \"ASC\" }}\r\n//   >\r\n//     <Responsive\r\n//       small={\r\n//         <SimpleList\r\n//           primaryText={record => record.name}\r\n//           secondaryText={record =>\r\n//             permissions === \"admin\" ? record.role : null\r\n//           }\r\n//         />\r\n//       }\r\n//       medium={\r\n//         <Datagrid>\r\n//           <TextField source=\"id\" />\r\n//           <TextField source=\"name\" />\r\n//           {permissions === \"admin\" && <TextField source=\"role\" />}\r\n//           {permissions === \"admin\" && <EditButton />}\r\n//           <ShowButton />\r\n//         </Datagrid>\r\n//       }\r\n//     />\r\n//   </List>\r\n// );\r\n\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const UserList = props => (\r\n  <List title=\"All users\" {...props} filters={<PostFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <TextField source=\"Name\" />\r\n          <TextField source=\"Bank Name\" />\r\n          <TextField source=\"Address\" />\r\n          <TextField source=\"No.HandPhone\" />\r\n          <EmailField source=\"Email\" />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/users.js\r\nimport React from \"react\";\r\nimport {\r\n  List,\r\n  Edit,\r\n  Datagrid,\r\n  EmailField,\r\n  TextField,\r\n  Filter,\r\n  Create,\r\n  TextInput,\r\n  ReferenceInput,\r\n  SelectInput,\r\n  SimpleForm,\r\n  LongTextInput,\r\n  SimpleList,\r\n  Responsive,\r\n  // ReferenceField,\r\n  DisabledInput\r\n} from \"react-admin\";\r\n\r\nconst PostFilter = props => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\r\n      <SelectInput optionText=\"name\" />\r\n    </ReferenceInput>\r\n  </Filter>\r\n);\r\n\r\nexport const ChekTransaksi = props => (\r\n  <List title=\"Check Transaction\" {...props} filters={<PostFilter />}>\r\n    <Responsive\r\n      small={\r\n        <SimpleList\r\n          primaryText={record => record.title}\r\n          secondaryText={record => `${record.views} views`}\r\n          tertiaryText={record =>\r\n            new Date(record.published_at).toLocaleDateString()\r\n          }\r\n        />\r\n      }\r\n      medium={\r\n        <Datagrid>\r\n          <TextField source=\"id\" />\r\n          <TextField source=\"name\" />\r\n          <TextField source=\"username\" />\r\n          <EmailField source=\"email\" />\r\n        </Datagrid>\r\n      }\r\n    />\r\n  </List>\r\n);\r\n\r\nconst PostTitle = ({ record }) => {\r\n  return <span>Post {record ? `\"${record.title}\"` : \"\"}</span>;\r\n};\r\nexport const PostEdit = props => (\r\n  <Edit title={<PostTitle />} {...props}>\r\n    <SimpleForm>\r\n      <DisabledInput source=\"id\" />\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\">\r\n        <SelectInput optionText=\"name\" />\r\n      </ReferenceInput>\r\n      <TextInput source=\"title\" />\r\n      <LongTextInput source=\"body\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","// in src/users.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\nexport const ItemList = props => (\r\n  <List title=\"All Items\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","import React from \"react\";\r\nimport { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\nexport const ScheduleList = props => (\r\n  <List title=\"Schedule Pickup\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/posts.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nexport const MyAccount = props => (\r\n  <List title=\"My Account\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"body\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","// in src/UpdateHarga.js\r\n// import React from \"react\";\r\n// import { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\n// export const UpdateHarga = props => (\r\n//   <List title=\"add/update pricing\" {...props}>\r\n//     <Datagrid>\r\n//       <TextField source=\"id\" />\r\n//       <TextField source=\"name\" />\r\n//       <TextField source=\"username\" />\r\n//       <EmailField source=\"email\" />\r\n//     </Datagrid>\r\n//   </List>\r\n// );\r\n\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport { List } from \"react-admin\";\r\n\r\nconst cardStyle = {\r\n  width: 300,\r\n  minHeight: 300,\r\n  margin: \"0.5em\",\r\n  display: \"inline-block\",\r\n  verticalAlign: \"top\"\r\n};\r\nconst GAMBAR = () => (\r\n  <div style={{ margin: \"1em\" }}>\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"Kaleng\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"Kardus\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"Botol AQua\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"lcnskjdcnasc\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"asdfnksjbc\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n\r\n    <Card style={cardStyle}>\r\n      <CardHeader title=\"asdfnksjbc\" />\r\n      <CardContent>INI GAMBAR SAMPAH</CardContent>\r\n      <CardContent>sssss about&nbsp;</CardContent>\r\n      <CardActions style={{ textAlign: \"right\" }} />\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nexport const UpdateHarga = props => (\r\n  <List title=\"Add/Update Pricings\" {...props}>\r\n    <GAMBAR />\r\n  </List>\r\n);\r\n","// in src/trashpurchase.js\r\nimport React from \"react\";\r\nimport { List, Datagrid, EmailField, TextField } from \"react-admin\";\r\n\r\nexport const trashpurchase = props => (\r\n  <List title=\"Trash Purchase List\" {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport PersonAdd from \"@material-ui/icons/PersonAdd\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {\r\n  TextField,\r\n  List,\r\n  DateField,\r\n  ReferenceField,\r\n  EditButton\r\n} from \"react-admin\";\r\n\r\nconst cardStyle = {\r\n  width: 300,\r\n  minHeight: 300,\r\n  margin: \"0.5em\",\r\n  display: \"inline-block\",\r\n  verticalAlign: \"top\"\r\n};\r\nconst CommentGrid = ({ ids, data, basePath }) => (\r\n  <div style={{ margin: \"1em\" }}>\r\n    {ids.map(id => (\r\n      <Card key={id} style={cardStyle}>\r\n        <CardHeader\r\n          title={<TextField record={data[id]} source=\"author.name\" />}\r\n          subheader={<DateField record={data[id]} source=\"created_at\" />}\r\n          avatar={<Avatar icon={<PersonAdd />} />}\r\n        />\r\n        <CardContent>\r\n          <TextField record={data[id]} source=\"body\" />\r\n        </CardContent>\r\n        <CardContent>\r\n          about&nbsp;\r\n          <ReferenceField\r\n            label=\"Post\"\r\n            resource=\"comments\"\r\n            record={data[id]}\r\n            source=\"post_id\"\r\n            reference=\"posts\"\r\n            basePath={basePath}\r\n          >\r\n            <TextField source=\"title\" />\r\n          </ReferenceField>\r\n        </CardContent>\r\n        <CardActions style={{ textAlign: \"right\" }}>\r\n          <EditButton resource=\"posts\" basePath={basePath} record={data[id]} />\r\n        </CardActions>\r\n      </Card>\r\n    ))}\r\n  </div>\r\n);\r\nCommentGrid.defaultProps = {\r\n  data: {},\r\n  ids: []\r\n};\r\n\r\nexport const CommentList = props => (\r\n  <List title=\"All comments\" {...props}>\r\n    <CommentGrid />\r\n  </List>\r\n);\r\n","// in src/Dashboard.js\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\n\r\n// const CommentGrid = ({ ids, data, basePath }) => (\r\n//   <div style={{ margin: \"1em\" }}>\r\n//     {ids.map(id => (\r\n\r\nexport default () => (\r\n  <Card>\r\n    <CardHeader\r\n      style={{ textAlign: \"center\" }}\r\n      title=\"Selamat Datang di Tampah Bank\"\r\n    />\r\n    <CardContent />\r\n    <CardActions style={{ textAlign: \"right\" }} />\r\n  </Card>\r\n);\r\n","// in src/authProvider.js\r\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from \"react-admin\";\r\n\r\nexport default (type, params) => {\r\n  // called when the user attempts to log in\r\n  if (type === AUTH_LOGIN) {\r\n    const { username } = params;\r\n    localStorage.setItem(\"username\", username);\r\n    // accept all username/password combinations\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user clicks on the logout button\r\n  if (type === AUTH_LOGOUT) {\r\n    localStorage.removeItem(\"username\");\r\n    return Promise.resolve();\r\n  }\r\n  // called when the API returns an error\r\n  if (type === AUTH_ERROR) {\r\n    const { status } = params;\r\n    if (status === 401 || status === 403) {\r\n      localStorage.removeItem(\"username\");\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n  // called when the user navigates to a new location\r\n  if (type === AUTH_CHECK) {\r\n    return localStorage.getItem(\"username\")\r\n      ? Promise.resolve()\r\n      : Promise.reject();\r\n  }\r\n  return Promise.reject(\"Unknown method\");\r\n};\r\n","// in src/App.js\nimport React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport { PostList, PostEdit, PostCreate } from \"./posts\";\nimport { UserList } from \"./users\";\nimport { ChekTransaksi } from \"./transactions\";\nimport { ItemList } from \"./Items\";\nimport { ScheduleList } from \"./schedules\";\nimport { MyAccount } from \"./MyAccount\";\nimport { UpdateHarga } from \"./UpdateHarga\";\nimport { trashpurchase } from \"./TrashPurchase\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { CommentList } from \"./comments.js\";\nimport index from \"@material-ui/core/colors/index\";\nimport Dashboard from \"./Dashboard\";\nimport authProvider from \"./authProvider\";\n//import dataProvider from './dataProvider';\nimport jsonServerProvider from \"ra-data-json-server\";\n//import simpleRestProvider from \"ra-data-json-server\";\nimport PostIcon from \"@material-ui/icons/Book\";\nimport UserIcon from \"@material-ui/icons/Group\";\nimport AddShoppingCart from \"@material-ui/icons/AddShoppingCart\";\nimport List from \"@material-ui/icons/List\";\nimport DateRange from \"@material-ui/icons/DateRange\";\nimport AccountBox from \"@material-ui/icons/AccountBox\";\nimport PersonAdd from \"@material-ui/icons/PersonAdd\";\nimport AddCircleOutline from \"@material-ui/icons/AddCircleOutline\";\n//import { formatMs } from \"@material-ui/core/styles/transitions\";\n\nconst dataProvider = jsonServerProvider(\n  // \"http://localhost:3000\"\n  \"https://my-json-server.typicode.com/dodinurkasih/jsonserver\"\n);\nconst theme = createMuiTheme({\n  palette: {\n    primary: index,\n    secondary: {\n      main: \"#00e5ff\"\n    }\n  }\n});\nconst App = () => (\n  <Admin\n    title\n    theme={theme}\n    dashboard={Dashboard}\n    authProvider={authProvider}\n    dataProvider={dataProvider}\n  >\n    <Resource\n      name=\"posts\"\n      list={PostList}\n      edit={PostEdit}\n      create={PostCreate}\n      icon={PostIcon}\n    />\n    <Resource name=\"users\" list={UserList} icon={UserIcon} />\n    <Resource name=\"transactions\" list={ChekTransaksi} icon={AddShoppingCart} />\n    <Resource name=\"Items\" list={ItemList} icon={List} />\n    <Resource name=\"schedules\" list={ScheduleList} icon={DateRange} />\n    <Resource name=\"MyAccount\" list={MyAccount} icon={AccountBox} />\n    <Resource\n      name=\"Add/Update Pricing\"\n      list={UpdateHarga}\n      icon={AddCircleOutline}\n    />\n    <Resource name=\"Trash Purchase\" list={trashpurchase} icon={AccountBox} />\n    <Resource name=\"comment\" list={CommentList} icon={PersonAdd} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}